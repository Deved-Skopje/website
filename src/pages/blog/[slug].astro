---
import { AstroSeo } from "@astrolib/seo";
import { getCollection } from "astro:content";
import Layout from "@layouts/Layout.astro";
import Container from "@components/container.astro";

// Generate a new path for every collection entry
export async function getStaticPaths() {
  const blogEntries = await getCollection("blog");
  return blogEntries.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

// Get the entry directly from the prop on render
const { entry } = Astro.props;
const { Content } = await entry.render();
---

<AstroSeo
  title={entry.data.title}
  description={entry.data.description}
  canonical={entry.data.canonical || Astro.url.toString()}
  twitter={{
    handle: "@DeveD_Skopje",
    site: "https://deved.mk",
    cardType: "summary_large_image",
  }}
  openGraph={{
    url: Astro.url.toString() || 'https://deved.mk',
    title: entry.data.title,
    description: entry.data?.description,
    images: [
      {
        url: new URL(Astro.url.pathname + "og.png", Astro.site).toString(),
        width: 1200,
        height: 630,
        alt: "Social open graph",
        type: "image/jpeg",
      },
      {
        url: new URL(Astro.url.pathname + "og.png", Astro.site).toString(),
        width: 4096,
        height: 4096,
        alt: "Twitter open graph",
        type: "image/jpeg",
      },
      { url: new URL(Astro.url.pathname + "og.png", Astro.site).toString() },
      { url: new URL(Astro.url.pathname + "og.png", Astro.site).toString() },
    ],
    site_name: "DeveD",
  }}
/>

<Layout title={entry.data.title}>
  <Container>
    <div class="mx-auto max-w-[735px] mt-14">
      <span class="text-blue-400 uppercase tracking-wider text-sm font-medium">
        {entry.data.category}
      </span>
      <h1
        class="text-4xl lg:text-5xl font-bold lg:tracking-tight mt-1 lg:leading-tight">
        {entry.data.title}
      </h1>
      <div class="flex gap-2 mt-3 items-center flex-wrap md:flex-nowrap">
        <span class="text-gray-400">
          {entry.data.author}
        </span>
        <span class="text-gray-400">•</span>
        <time
          class="text-gray-400"
          datetime={entry.data.publishDate.toISOString()}>
          {entry.data.publishDate.toDateString()}
        </time>
        <span class="text-gray-400 hidden md:block">•</span>
        <div class="w-full md:w-auto flex flex-wrap gap-3">
          {
            entry.data.tags.map((tag) => (
              <span class="text-sm text-gray-500">#{tag}</span>
            ))
          }
        </div>
      </div>
    </div>

    <div class="mx-auto prose prose-lg mt-6">
        <Content />
    </div>
    <div class="text-center mt-8">
      <a
        href="/blog"
        class="bg-gray-100 px-5 py-3 rounded-md hover:bg-gray-200 transition"
        >← Back to Blog</a
      >
    </div>
  </Container>
</Layout>